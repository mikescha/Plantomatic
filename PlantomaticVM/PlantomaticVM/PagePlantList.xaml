<?xml version="1.0" encoding="utf-8" ?>
  <ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
               xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
               xmlns:plants="clr-namespace:PlantMan.Plant;assembly=Plant"
               xmlns:tools="clr-namespace:PlantomaticVM"
               xmlns:theplantlist="clr-namespace:PlantomaticVM;assembly=PlantomaticVM"
               x:Class="PlantomaticVM.PlantListPage"
               Title="Matching Plants" 
               SizeChanged="OnPageSizeChanged"
               BindingContext="{Binding Source={x:Static Application.Current}, Path=AppData}">
    
    <ContentPage.Padding>
        <OnPlatform x:TypeArguments="Thickness" iOS="0, 20, 0, 0" WinPhone="0,5,5,10" Android="5,5,5,5"/>
    </ContentPage.Padding>

    <ContentPage.Resources>
        <ResourceDictionary>
            <tools:ListToBoolConverter           x:Key="listToBoolConverter" />
            <tools:ListToBoolConverterOpposite   x:Key="listToBoolConverterOpposite" />
            <tools:ObjectToBoolConverter         x:Key="objectToBoolConverter" />
            <tools:ObjectToBoolConverterOpposite x:Key="objectToBoolConverterOpposite" />

            <tools:BoolToStringConverter x:Key="AddRemoveCartText" 
                                         TrueText="Remove from cart"
                                         FalseText="Add to cart"/>

            <tools:BoolToStringConverter x:Key="ColorIfInList" 
                                         TrueText="Green"
                                         FalseText="Black"/>
        </ResourceDictionary> 
    </ContentPage.Resources>
    
    <Grid x:Name="mainGrid">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="0" />
        </Grid.ColumnDefinitions>
        
        <StackLayout Grid.Row="0" Grid.Column="0">
            <Label Text="{Binding MasterViewModel.PlantList.MyPlants.Count, StringFormat = '{0} matches'}"
                   Style="{StaticResource H1Style}"/>
        </StackLayout>
    
        <StackLayout Grid.Row="1" Grid.Column="0">
            <Label Text="No matching plants" 
                   Style="{StaticResource H1Style}"
                   IsVisible="{Binding Source={x:Reference listView}, Path=ItemsSource, Converter={StaticResource listToBoolConverter}}"/>
      
          <!--The list of plants-->
            <ListView x:Name="listView" 
                    ItemsSource="{Binding MasterViewModel.PlantList.MyPlants}" 
                    Grid.Row="1" Grid.Column="0"
                    ItemTapped="OnPlantSelected"
                    SeparatorVisibility="None"
                    BackgroundColor="#f9f9f9">
                <ListView.ItemTemplate>
                    <DataTemplate>
                        <ViewCell>
                            <ViewCell.ContextActions>
                                <MenuItem Text="{Binding InCart, Converter={StaticResource AddRemoveCartText}}" 
                                Clicked="OnToggleCartMenuClicked"/>
                            </ViewCell.ContextActions>

                            <StackLayout>
                                <!--TODO This changes label color if the plant is in the list. Decide if this is what we want-->
                                <Label Text="{Binding Plant.Name}"
                                       TextColor="{Binding InCart, Converter={StaticResource ColorIfInList}}" 
                                       Margin="0"/>
                            </StackLayout>
                            
                        </ViewCell>
                    </DataTemplate>
                </ListView.ItemTemplate>
            </ListView>
        </StackLayout>
      
        <!--The detail that shows when a plant is selected-->
        <!--Set visible status of the ScrollViw based on number of items in the list; if there are none then hide it so we don't show detail when there isn't any-->
        <ScrollView x:Name="detailLayout" 
                    Grid.Row="2" Grid.Column="0" 
                    IsVisible="{Binding Source={x:Reference listView}, Path=ItemsSource, Converter={StaticResource listToBoolConverterOpposite}}" >
            <StackLayout>
                <!--Defaults to true because nothing is selected by default. When something is selected then the binding changes to hide this-->
                <Label x:Name="nothingSelectedLabel" 
                       Style="{StaticResource H1Style}"
                       Text="Select a plant to learn more about it." 
                       IsVisible="{Binding Source={x:Reference listView}, Path=SelectedItem, Converter={StaticResource objectToBoolConverter}}"/>

                <StackLayout x:Name="detailStack"
                             BindingContext="{Binding Source={x:Reference listView}, Path=SelectedItem}" 
                             HorizontalOptions="StartAndExpand" VerticalOptions="Start" 
                             Orientation="Vertical" 
                             Spacing="5"
                             IsVisible="{Binding Source={x:Reference listView}, Path=SelectedItem, Converter={StaticResource objectToBoolConverterOpposite}}">
                    <!--TODO is this needed any more?
                    <StackLayout.Resources>
                        <ResourceDictionary>
                            <Style TargetType="Label">
                                <Setter Property="TextColor" Value="Black" />
                            </Style>
                        </ResourceDictionary>
                    </StackLayout.Resources>
                -->
                    <!--At this point, the context of the binding is the selected item. So, all the labels can just point to specific fields.-->
                    <Label Text="{Binding Plant.Name}" FontSize="Medium"/>
                    <Label Text="{Binding Plant.ScientificName}" FontAttributes="Italic"/>
                    <Label Text="{Binding Plant.NotableVisuals}"/>
                    <Label Text="{Binding Plant.Notes}"/>
                    <Label Text="{Binding Plant.PlantTypes}"/>
                    <Label Text="{Binding Plant.MinWinterTempF.Value, StringFormat='Minimum low temp: {0}'}" />
                    <Label Text="{Binding Plant.SunRequirements, StringFormat='Sun requirements: {0}'}" />
                    <Label Text="{Binding Plant.FloweringMonths, StringFormat='Flowering months: {0}'}" />
                    <Label Text="{Binding Plant.MaxWidth.Value, StringFormat='Maximum width: {0} ft'}"  />
                    <Label Text="{Binding Plant.MaxHeight.Value, StringFormat='Maximum height: {0} ft'}"  />
                    <Label x:Name="MoreInfoURLLabel" Text="More info..." TextColor="Blue" >
                        <Label.GestureRecognizers>
                            <TapGestureRecognizer Tapped="OnMoreInfoTapped"/>
                        </Label.GestureRecognizers>
                    </Label>
                    <StackLayout Orientation="Horizontal" 
                                 HorizontalOptions="StartAndExpand"
                                 VerticalOptions="Center">
                        <Label Text="How many do you want?"
                               VerticalTextAlignment="Center"/>
                        <Entry Text="{Binding Count, Mode=TwoWay}"  Keyboard="Numeric"/>

                        <Button Text="Clear"
                                BorderWidth="1"
                                Command="{Binding RemoveItem}">
                            <!--Comment out the border color stuff until I figure out the right thing to do for each platform. On the Android emulator
                                with the white background, this is super-ugly.
                            <Button.BackgroundColor>
                                <OnPlatform x:TypeArguments="Color" Android="#404040" />
                            </Button.BackgroundColor>
                            <Button.BorderColor>
                                <OnPlatform x:TypeArguments="Color" Android="White" WinPhone="Black" />
                            </Button.BorderColor>-->
                        </Button>
                    </StackLayout>
                
                
                    <!-- If I can figure out how to do this as part of the viewmodel with binding, then instead of Clicked I would have 
                     something like, Command="{Binding ToggleCartStatus}"  
                
                    Do I need this any more?
                
                    <tools:BoolToStringConverter x:Key="ShowListText" 
                                         TrueText="Show matching plants"
                                         FalseText="Show shopping list"/>

                    <Button x:Name="AddToCartButton" Text="{Binding InCart, Converter={StaticResource AddRemoveCartText}}" 
                        BorderWidth="1"     
                        Clicked="OnToggleCartButtonClicked"
                        IsVisible="false">
                        <Button.BackgroundColor>
                            <OnPlatform x:TypeArguments="Color" Android="#404040" />
                        </Button.BackgroundColor>
                        <Button.BorderColor>
                            <OnPlatform x:TypeArguments="Color" Android="White" WinPhone="Black" />
                        </Button.BorderColor>
                    </Button>
    -->
                </StackLayout>
            </StackLayout>
        </ScrollView>

    </Grid>

</ContentPage>